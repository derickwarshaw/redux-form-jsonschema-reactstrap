// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render InputFields Should render ColorInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="color"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    ColorInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="ColorInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "ColorInputField",
        "meta": Object {
          "vis": Object {
            "component": "ColorInputField",
            "editable": true,
            "ordinal": Object {
              "ColorInputField": [Function],
              "DateInputField": [Function],
              "EmailInputField": [Function],
              "FileInputField": [Function],
              "InputField": [Function],
              "NumberInputField": [Function],
              "PasswordInputField": [Function],
              "TextAreaInputField": [Function],
            },
          },
        },
        "title": "ColorInputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="color"
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render DateInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="date"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    DateInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="DateInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "DateInputField",
        "meta": Object {
          "vis": Object {
            "component": "DateInputField",
            "editable": true,
            "ordinal": Object {
              "ColorInputField": [Function],
              "DateInputField": [Function],
              "EmailInputField": [Function],
              "FileInputField": [Function],
              "InputField": [Function],
              "NumberInputField": [Function],
              "PasswordInputField": [Function],
              "TextAreaInputField": [Function],
            },
          },
        },
        "title": "DateInputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="date"
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render EmailInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="email"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    EmailInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="EmailInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "EmailInputField",
        "meta": Object {
          "vis": Object {
            "component": "EmailInputField",
            "editable": true,
            "ordinal": Object {
              "ColorInputField": [Function],
              "DateInputField": [Function],
              "EmailInputField": [Function],
              "FileInputField": [Function],
              "InputField": [Function],
              "NumberInputField": [Function],
              "PasswordInputField": [Function],
              "TextAreaInputField": [Function],
            },
          },
        },
        "title": "EmailInputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="email"
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render FileInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="file"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    FileInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control-file"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="FileInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "FileInputField",
        "meta": Object {
          "vis": Object {
            "component": "FileInputField",
            "editable": true,
            "ordinal": Object {
              "ColorInputField": [Function],
              "DateInputField": [Function],
              "EmailInputField": [Function],
              "FileInputField": [Function],
              "InputField": [Function],
              "NumberInputField": [Function],
              "PasswordInputField": [Function],
              "TextAreaInputField": [Function],
            },
          },
        },
        "title": "FileInputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="file"
    untouch={[Function]}
    valid={true}
    value={undefined}
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render InputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="text"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    InputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="InputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "InputField",
        "meta": Object {
          "vis": Object {
            "component": "InputField",
            "editable": true,
            "ordinal": Object {
              "ColorInputField": [Function],
              "DateInputField": [Function],
              "EmailInputField": [Function],
              "FileInputField": [Function],
              "InputField": [Function],
              "NumberInputField": [Function],
              "PasswordInputField": [Function],
              "TextAreaInputField": [Function],
            },
          },
        },
        "title": "InputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="text"
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render NumberInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="number"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    NumberInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="NumberInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "NumberInputField",
        "meta": Object {
          "vis": Object {
            "component": "NumberInputField",
            "editable": true,
            "ordinal": Object {
              "ColorInputField": [Function],
              "DateInputField": [Function],
              "EmailInputField": [Function],
              "FileInputField": [Function],
              "InputField": [Function],
              "NumberInputField": [Function],
              "PasswordInputField": [Function],
              "TextAreaInputField": [Function],
            },
          },
        },
        "title": "NumberInputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="number"
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render PasswordInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="password"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    PasswordInputField
  </label>
  <input
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="PasswordInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "PasswordInputField",
        "meta": Object {
          "vis": Object {
            "component": "PasswordInputField",
            "editable": true,
            "ordinal": Object {
              "ColorInputField": [Function],
              "DateInputField": [Function],
              "EmailInputField": [Function],
              "FileInputField": [Function],
              "InputField": [Function],
              "NumberInputField": [Function],
              "PasswordInputField": [Function],
              "TextAreaInputField": [Function],
            },
          },
        },
        "title": "PasswordInputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    type="password"
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  />
</div>
`;

exports[`Render InputFields Should render SelectInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="select"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    SelectInputField
  </label>
  <select
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="SelectInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "SelectInputField",
        "oneOf": Array [
          Object {
            "const": 1,
            "description": "foo description",
            "title": "foo",
          },
          Object {
            "const": 2,
            "description": "bar description",
            "title": "bar",
          },
        ],
        "title": "SelectInputField",
        "type": "number",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  >
    <option
      value={2}
    >
      bar
    </option>
    <option
      value={1}
    >
      foo
    </option>
  </select>
</div>
`;

exports[`Render InputFields Should render SelectInputField with groups 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="select"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    SelectInputField
  </label>
  <select
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="SelectInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "SelectInputField",
        "oneOf": Array [
          Object {
            "oneOf": Array [
              Object {
                "const": 1,
                "description": "foo description",
                "title": "foo",
              },
              Object {
                "const": 2,
                "description": "foo2 description",
                "title": "foo2",
              },
            ],
            "title": "Foo Group",
          },
          Object {
            "oneOf": Array [
              Object {
                "const": 1,
                "description": "bar description",
                "title": "bar",
              },
              Object {
                "const": 2,
                "description": "bar2 description",
                "title": "bar2",
              },
            ],
            "title": "Bar Group",
          },
        ],
        "title": "SelectInputField",
        "type": "number",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  >
    <optgroup
      label="Bar Group"
    >
      <option
        value={1}
      >
        bar
      </option>
      <option
        value={2}
      >
        bar2
      </option>
    </optgroup>
    <optgroup
      label="Foo Group"
    >
      <option
        value={1}
      >
        foo
      </option>
      <option
        value={2}
      >
        foo2
      </option>
    </optgroup>
  </select>
</div>
`;

exports[`Render InputFields Should render SelectInputField with only values 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="select"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    SelectInputField
  </label>
  <select
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="SelectInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "SelectInputField",
        "oneOf": Array [
          Object {
            "const": "foo",
          },
          Object {
            "const": "bar",
          },
        ],
        "title": "SelectInputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  >
    <option
      value="bar"
    >
      bar
    </option>
    <option
      value="foo"
    >
      foo
    </option>
  </select>
</div>
`;

exports[`Render InputFields Should render TextAreaInputField 1`] = `
<div
  anyTouched={false}
  array={
    Object {
      "insert": [Function],
      "move": [Function],
      "pop": [Function],
      "push": [Function],
      "remove": [Function],
      "removeAll": [Function],
      "shift": [Function],
      "splice": [Function],
      "swap": [Function],
      "unshift": [Function],
    }
  }
  asyncValidate={[Function]}
  autofill={[Function]}
  blur={[Function]}
  change={[Function]}
  className="form-group"
  clearAsyncError={[Function]}
  clearSubmit={[Function]}
  clearSubmitErrors={[Function]}
  destroy={[Function]}
  error={undefined}
  handleSubmit={[Function]}
  initialValues={undefined}
  initialize={[Function]}
  initialized={false}
  invalid={false}
  pure={true}
  reset={[Function]}
  submit={[Function]}
  submitSucceeded={false}
  touch={[Function]}
  triggerSubmit={undefined}
  type="textarea"
  untouch={[Function]}
  valid={true}
  warning={undefined}
>
  <label
    className=""
    htmlFor={undefined}
    id="undefined-label"
  >
    TextAreaInputField
  </label>
  <textarea
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    className="form-control"
    clearAsyncError={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    error={undefined}
    handleSubmit={[Function]}
    id={undefined}
    initialValues={undefined}
    initialize={[Function]}
    initialized={false}
    input={undefined}
    invalid={false}
    meta={
      Object {
        "active": false,
        "asyncValidating": false,
        "autofilled": false,
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "MyForm",
        "initial": undefined,
        "invalid": false,
        "pristine": true,
        "submitFailed": false,
        "submitting": false,
        "touched": false,
        "valid": true,
        "visited": false,
        "warning": undefined,
      }
    }
    name="TextAreaInputField"
    onBlur={[Function]}
    onChange={[Function]}
    onDragStart={[Function]}
    onDrop={[Function]}
    onFocus={[Function]}
    pure={true}
    reset={[Function]}
    schema={
      Object {
        "id": "TextAreaInputField",
        "meta": Object {
          "vis": Object {
            "component": "TextAreaInputField",
            "editable": true,
            "ordinal": Object {
              "ColorInputField": [Function],
              "DateInputField": [Function],
              "EmailInputField": [Function],
              "FileInputField": [Function],
              "InputField": [Function],
              "NumberInputField": [Function],
              "PasswordInputField": [Function],
              "TextAreaInputField": [Function],
            },
          },
        },
        "title": "TextAreaInputField",
        "type": "string",
      }
    }
    submit={[Function]}
    submitSucceeded={false}
    touch={[Function]}
    triggerSubmit={undefined}
    untouch={[Function]}
    valid={true}
    value=""
    warning={undefined}
  />
</div>
`;
